---
apiVersion: v1
kind: Secret
metadata:
  name: auth
  namespace: {{ .Release.Namespace }}
stringData:
  # The only supported password format is bcrypt
  htpasswd:  {{ htpasswd .Values.global.registryUsername .Values.global.registryPassword | quote }}
---
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "container-registry.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  selector:
    {{- include "container-registry.selectorLabels" . | nindent 4 }}
  ports:
  - name: registry
    port: 5000
    targetPort: 5000


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    {{- if .Capabilities.APIVersions.Has "cert-manager.io/v1" }}
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    {{- end }}
  labels:
    {{- include "container-registry.labels" . | nindent 4 }}
  name: registry
  namespace: {{ .Release.Namespace }}
spec:
  {{- if .Values.ingress.ingressClassName }}
  ingressClassName: "{{ .Values.ingress.ingressClassName }}"
  {{- end }}
  rules:
  - host: "epinio-registry.{{ .Values.global.domain }}"
    http:
      paths:
      - backend:
          service:
            name: registry
            port:
              number: 5000
        path: /
        pathType: ImplementationSpecific
  {{- if .Capabilities.APIVersions.Has "cert-manager.io/v1" }}
  tls:
  - hosts:
    - "epinio-registry.{{ .Values.global.domain }}"
    secretName: epinio-registry-tls
  {{- end }}
{{ if .Values.createNodePort }}
---
apiVersion: v1
kind: Service
metadata:
  name: registry-node
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "container-registry.labels" . | nindent 4 }}
spec:
  type: NodePort
  selector:
    {{- include "container-registry.selectorLabels" . | nindent 4 }}
  ports:
  - name: registry
    port: 5000
    targetPort: 5000
    nodePort: 30500
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "container-registry.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "container-registry.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "container-registry.labels" . | nindent 8 }}
    spec:
      containers:
      - name: registry
        image: {{ .Values.registry.image }}
        imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
        env:
        - name: REGISTRY_AUTH
          value: htpasswd
        - name: REGISTRY_AUTH_HTPASSWD_REALM
          value: Registry Realm
        - name: REGISTRY_AUTH_HTPASSWD_PATH
          value: /etc/registry/auth/htpasswd
        volumeMounts:
        - name: registry
          mountPath: /var/lib/registry
          readOnly: false
        - name: auth
          mountPath: /etc/registry/auth
          readOnly: true
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        livenessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: registry
        emptyDir: {}
      - name: auth
        secret:
          secretName: auth
